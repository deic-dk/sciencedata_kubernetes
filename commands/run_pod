#!/bin/bash

# run_pod -o owner -k public_key -p storage_path yaml_file
# E.g. run_pod -o fror@dtu.dk -p www ubuntu_sciencedata.yaml

EXTERNAL_IP=130.226.137.130
SCIENCEDATA_IP=10.0.0.13

cmd="`echo $(readlink -f \"$0\")`"
DIR="`dirname $cmd`"

SSH_SERVICE_YAML_FILE="$DIR/../service_manifests/ssh_service.yaml"
NFS_VOLUME_YAML_FILE="$DIR/../service_manifests/nfs_volume.yaml"
NFS_CLAIM_YAML_FILE="$DIR/../service_manifests/nfs_claim.yaml"
CADDY_FILE="$DIR/../service_manifests/Caddyfile"
TMPDIR="/tmp"

yaml_file=""
owner=""
ssh_public_key=""
storage_path=""
dryrun=

while getopts "o:k:p:d" flag; do
	case "$flag" in
		o)
			# ScienceData userid who will own the pod
			owner=$OPTARG
			;;
		k)
			# Public key to be inserted into /root/.ssh/authorized_keys
			ssh_public_key=$OPTARG
			;;
		p)
			# Path on home server to be claimed, relative to /tank/storage/owner/
			# Notice that the mountpoint is specified in the pod yaml
			storage_path=$OPTARG
			;;
		d)
			# If set, no actions are performed, only reported
			dryrun="yes"
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done

yaml_file=${@:$OPTIND:1}
#EXTRA_ARG=${@:$OPTIND+1:1}

if [ -z "$owner" ]; then
	echo "ERROR: Need owner"  >&2
	exit -1
fi

# Check if the user is attempting to use the host network
grep -iE 'hostnetwork' "$yaml_file"
if [ $? -eq 0 ]; then
	echo "ERROR: Only internal network allowed" >&2
	exit -2
fi

# Check if the user is attempting an NFS volume deployment (mount)
grep -iE 'kind: *Deployment' "$yaml_file"
if [ $? -eq 0 ]; then
	echo "ERROR: Manual mounts are not allowed" >&2
	exit -2
fi

# Check if there is an NFS persistentVolumeClaim claim in the pod yaml
grep -E '^ claimName: sciencedata-nfs-claim' "$yaml_file"
if [ "$?" -eq "0" ]; then
	echo "ERROR: Manual claims are not allowed" >&2
	exit -3
fi

if [ -z "$ssh_public_key" ]; then
	# No ssh public key given on stdin, try getting it from env
	ssh_public_key="$SSH_PUBLIC_KEY"
	if [ -z "$ssh_public_key" ]; then
		# Try getting ssh public key from yaml
		ssh_public_key="`cat \"$yaml_file\" | yq -r '.spec.containers[]?.env[]? | select(.name == \"SSH_PUBLIC_KEY\") | .value'`"
		if [ -z "$ssh_public_key" ]; then
			echo "WARNING: No SSH public key - it will not be possible to log in" >&2kill "$pid"				return false;

		fi
	fi
fi

if [ -z "$yaml_file" ]; then
	echo "ERROR: Need input file" >&2
	exit 1
fi

user=`echo $owner | awk -F@ '{print $1}'`
domain=`echo $owner | awk -F@ '{print $2}'`
owner_str=`echo $owner | sed 's|[@._]|-|g'`

pod_name="`cat \"$yaml_file\" | yq -r .metadata.name | head -1`-${owner_str}"

# Try up to 9 times to append to name if pod with this name is already running (i.e. allow 10 copies per user)
new_pod_name="${pod_name}"
for i in {1..9}; do
	kubectl get pod "$new_pod_name" >& /dev/null
	if [ $? -eq 0 ]; then
		new_pod_name="${pod_name}-${i}"
	else
		break
	fi
done
if [ -n "$new_pod_name" ] && [ "$new_pod_name" != "$pod_name" ]; then
	pod_name="$new_pod_name"
fi

if [ -n "$storage_path" ]; then
	# Check if $owner has a home server configured, otherwise default to $SCIENCEDATA_IP
	home_server=`curl --insecure "https://${SCIENCEDATA_IP}/apps/files_sharding/ws/get_user_server.php?user_id=${owner}&internal=yes" | sed 's|\\/|/|g' | jq -r '.url' | grep -E 'https*://' | sed -E 's|^https*://||'`
	if [ ! $home_server ]; then
		home_server=$SCIENCEDATA_IP
	fi
	# Check if directory exists
	dir_exists_http_code=`curl --insecure -H "Depth: 0" -X PROPFIND -o /dev/null -w "%{http_code}" \
	-u ${owner}: "https://${home_server}/storage/${storage_path}/"`
	# Create if not
	if [ "$dir_exists_http_code" != "207" ] && [ -z "$dryrun" ]; then
		echo INFO: "https://${home_server}/storage/${storage_path}/ does NOT exist" >&2
		curl --insecure -X MKCOL -u ${owner}: "https://${home_server}/storage/${storage_path}/"
	fi
	if [ $home_server ]; then
		kubectl get persistentvolume | grep "nfs-${home_server}-${owner_str}" >& /dev/null
		if [ "$?" -ne "0" ]; then
			create_nfs_volume="yes"
		fi
		# Check if a claim has already been made on $storage_path
		kubectl get PersistentVolumeClaim | grep  "nfs-${home_server}-${owner_str}-${storage_path}" >& /dev/null
		if [ "$?" -ne "0" ]; then
			create_nfs_claim="yes"
		fi
	fi
fi

# Find free port for Caddy proxy in range 2000-3000
for reverse_proxy_port in {2000..3000}; do
	ps aux | grep "caddy run .*\-\-config ${TMPDIR}/Caddyfile-.*-" >& /dev/null || break
	ps auxw | grep caddy | grep -v "/etc/caddy/Caddyfile" | grep -v grep | grep -Ev "caddy run .*\-\-config ${TMPDIR}/Caddyfile-.*-${reverse_proxy_port}" && break
done

# This is picked up by start.sh inside the container (for ScienceData-enabled containers)
if [ $home_server ]; then
	export my_home_server=`echo $home_server | sed 's|^10\.0\.|10.2.|'`
fi

if [ -n "$pod_name" ]; then
	### Modify pod YAML - ssh public key, metadata, volume
	( cat $yaml_file | \
	yq -r "(.spec.containers[].env[] | select(.name == \"SSH_PUBLIC_KEY\") | .value) |= \"$ssh_public_key\"" | \
	yq -r "(.spec.containers[].env[] | select(.name == \"HOME_SERVER\") | .value) |= \"$my_home_server\"" | \
	yq -r -y ".metadata.name=\"$pod_name\"" |\
	yq -r -y ".metadata.labels.user=\"$user\"" | \
	yq -r -y ".metadata.labels.domain=\"$domain\"" |\
	yq -r -y ".metadata.labels.app=\"$pod_name\"" | \
	yq -r -y ".metadata.labels.reverseProxyPort=\"$reverse_proxy_port\"" |\
	( [ -z "$storage_path" ] && cat || yq -r -y ".spec.volumes=[{\"name\":\"sciencedata\", \"persistentVolumeClaim\": {\"claimName\": \"nfs-${home_server}-${owner_str}-${storage_path}\"}}]")
	### SSH service
	echo "---"
	cat "$SSH_SERVICE_YAML_FILE"| yq -r -y ".spec.externalIPs=[\"$EXTERNAL_IP\"]" |\
	yq -r -y ".metadata.name=\"${pod_name}-ssh\"" | yq -r -y ".spec.selector={\"app\":\"$pod_name\"}"
	if [ -n "$storage_path" ]; then
		### NFS volume
		if [ -n "$create_nfs_volume" ]; then
			echo "---"
			cat "$NFS_VOLUME_YAML_FILE" | \
			sed "s|NFS_VOLUME_NAME|nfs-${home_server}-${owner_str}|g" | \
			sed "s|STORAGE_PATH|${owner}/${storage_path}|g" | \
			sed "s|SERVER_IP|$home_server|g"
		fi
		### NFS persistent volume claim
		if [ -n "$create_nfs_claim" ]; then
			echo "---"
			cat "$NFS_CLAIM_YAML_FILE" | \
			sed "s|NFS_CLAIM_NAME|nfs-${home_server}-${owner_str}-${storage_path}|g"
		fi
	fi
	) | tee >([ -z "$dryrun" ] && kubectl apply -f - || kubectl apply --validate=true --dry-run=client -f -)
else
	echo "ERROR: Parsing .metadata.name from YAML failed" >&2
	exit 2
fi

if [ -z "$dryrun" ]; then
	# Wait for one minut for pod to start
	for i in {1..60}; do
		# Find local IP
		podip=`kubectl get pod "$pod_name" -o json | jq -r '.status.podIP' | sed 's|null||'`
		if [ -n "$podip" ]; then
			# Run Caddy reverse proxy
			echo "INFO: Running reverse proxy caddy reverse-proxy --from https://kube.sciencedata.dk:$reverse_proxy_port --to $podip:80" >&2
			#caddy reverse-proxy --from https://kube.sciencedata.dk:$reverse_proxy_port --to $podip:80 >& /dev/null &
			sed "s|WEBPORT|$reverse_proxy_port|" "$CADDY_FILE" > "$TMPDIR/Caddyfile-${podip}-${reverse_proxy_port}"
			sed -i "s|PODIP|$podip|" "$TMPDIR/Caddyfile-${podip}-${reverse_proxy_port}"
			caddy start -config "$TMPDIR/Caddyfile-${podip}-${reverse_proxy_port}"
			break
		fi
		sleep 10
	done
	if [ -z "$podip" ]; then
		echo "ERROR: pod $pod_name did not start. NOT running reverse proxy caddy reverse-proxy --from https://kube.sciencedata.dk:$reverse_proxy_port --to $podip:80."
	fi
fi

